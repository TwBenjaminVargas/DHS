# Generated from /home/ben/Documentos/DHS/MavenDHS/dhs2024/src/main/python/dhs2024/compiladores.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,130,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
        1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,
        1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,18,1,19,4,19,100,8,19,11,19,12,19,101,1,20,1,20,1,20,1,20,
        1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,
        3,24,121,8,24,1,24,1,24,1,24,5,24,126,8,24,10,24,12,24,129,9,24,
        0,0,25,1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,
        11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,
        22,49,23,1,0,3,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,132,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,53,1,0,0,0,5,
        55,1,0,0,0,7,57,1,0,0,0,9,59,1,0,0,0,11,61,1,0,0,0,13,63,1,0,0,0,
        15,65,1,0,0,0,17,67,1,0,0,0,19,69,1,0,0,0,21,71,1,0,0,0,23,73,1,
        0,0,0,25,75,1,0,0,0,27,78,1,0,0,0,29,81,1,0,0,0,31,84,1,0,0,0,33,
        87,1,0,0,0,35,90,1,0,0,0,37,92,1,0,0,0,39,99,1,0,0,0,41,103,1,0,
        0,0,43,107,1,0,0,0,45,111,1,0,0,0,47,114,1,0,0,0,49,120,1,0,0,0,
        51,52,7,0,0,0,52,2,1,0,0,0,53,54,7,1,0,0,54,4,1,0,0,0,55,56,5,40,
        0,0,56,6,1,0,0,0,57,58,5,41,0,0,58,8,1,0,0,0,59,60,5,123,0,0,60,
        10,1,0,0,0,61,62,5,125,0,0,62,12,1,0,0,0,63,64,5,59,0,0,64,14,1,
        0,0,0,65,66,5,43,0,0,66,16,1,0,0,0,67,68,5,45,0,0,68,18,1,0,0,0,
        69,70,5,42,0,0,70,20,1,0,0,0,71,72,5,47,0,0,72,22,1,0,0,0,73,74,
        5,37,0,0,74,24,1,0,0,0,75,76,5,43,0,0,76,77,5,43,0,0,77,26,1,0,0,
        0,78,79,5,45,0,0,79,80,5,45,0,0,80,28,1,0,0,0,81,82,5,38,0,0,82,
        83,5,38,0,0,83,30,1,0,0,0,84,85,5,124,0,0,85,86,5,124,0,0,86,32,
        1,0,0,0,87,88,5,61,0,0,88,89,5,61,0,0,89,34,1,0,0,0,90,91,5,61,0,
        0,91,36,1,0,0,0,92,93,5,119,0,0,93,94,5,104,0,0,94,95,5,105,0,0,
        95,96,5,108,0,0,96,97,5,101,0,0,97,38,1,0,0,0,98,100,3,3,1,0,99,
        98,1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,40,
        1,0,0,0,103,104,5,105,0,0,104,105,5,110,0,0,105,106,5,116,0,0,106,
        42,1,0,0,0,107,108,5,102,0,0,108,109,5,111,0,0,109,110,5,114,0,0,
        110,44,1,0,0,0,111,112,5,105,0,0,112,113,5,102,0,0,113,46,1,0,0,
        0,114,115,7,2,0,0,115,116,1,0,0,0,116,117,6,23,0,0,117,48,1,0,0,
        0,118,121,3,1,0,0,119,121,5,95,0,0,120,118,1,0,0,0,120,119,1,0,0,
        0,121,127,1,0,0,0,122,126,3,1,0,0,123,126,3,3,1,0,124,126,5,95,0,
        0,125,122,1,0,0,0,125,123,1,0,0,0,125,124,1,0,0,0,126,129,1,0,0,
        0,127,125,1,0,0,0,127,128,1,0,0,0,128,50,1,0,0,0,129,127,1,0,0,0,
        5,0,101,120,125,127,1,6,0,0
    ]

class compiladoresLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PA = 1
    PC = 2
    LLA = 3
    LLC = 4
    PYC = 5
    SUMA = 6
    RESTA = 7
    MUL = 8
    DIV = 9
    MOD = 10
    INC = 11
    DEC = 12
    AND = 13
    OR = 14
    IGUAL = 15
    ASIG = 16
    WHILE = 17
    NUMERO = 18
    INT = 19
    FOR = 20
    IF = 21
    WS = 22
    ID = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'++'", "'--'", "'&&'", "'||'", "'=='", "'='", "'while'", 
            "'int'", "'for'", "'if'" ]

    symbolicNames = [ "<INVALID>",
            "PA", "PC", "LLA", "LLC", "PYC", "SUMA", "RESTA", "MUL", "DIV", 
            "MOD", "INC", "DEC", "AND", "OR", "IGUAL", "ASIG", "WHILE", 
            "NUMERO", "INT", "FOR", "IF", "WS", "ID" ]

    ruleNames = [ "LETRA", "DIGITO", "PA", "PC", "LLA", "LLC", "PYC", "SUMA", 
                  "RESTA", "MUL", "DIV", "MOD", "INC", "DEC", "AND", "OR", 
                  "IGUAL", "ASIG", "WHILE", "NUMERO", "INT", "FOR", "IF", 
                  "WS", "ID" ]

    grammarFileName = "compiladores.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


